version: '3.9'

services:
  db:
    container_name: wti_db
    image: 'postgres:15-alpine'
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_DB=${DATABASE_NAME}
    ports:
      - '127.0.0.1:${DATABASE_PORT}:5432'
    volumes:
      - ./DockerVolumes/PostgresDb:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 3s
      
  amqp:
    container_name: wti_amqp
    image: 'rabbitmq:3.12-management-alpine'
    restart: unless-stopped
    ports:
      - '${AMQP_PORT}:5672'
      - '${AMQP_MANAGEMENT_PORT}:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=${AMQP_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${AMQP_PASSWORD}
    volumes:
      - ./DockerVolumes/RabbitMq/data/:/var/lib/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3
      
  api:
    build: 
      context: .
      dockerfile: Dockerfile.api
    environment:
      - ASPNETCORE_ConnectionStrings__Db=Host=db;Username=${DATABASE_USER};Password=${DATABASE_PASSWORD};Database=${DATABASE_NAME}
      - ASPNETCORE_ConnectionStrings__Amqp=Host=amqp;Port=${AMQP_PORT};Username=${AMQP_USERNAME};Password=${AMQP_PASSWORD};ProvidedName=ApiClient
      #- ASPNETCORE_LocalStorage__OriginalFiles=/var/lib/localStorage/files/original
      #- ASPNETCORE_LocalStorage__ProcessedFiles=/var/lib/localStorage/files/processed
      - ASPNETCORE_Kestrel__Endpoints__Http__Url=http://0.0.0.0:6010
    container_name: wti_api
    restart: unless-stopped
    ports:
      - "6010:${API_PORT}"
    #volumes:
    #  - ${ORIGINAL_FILES_DIRECTORY}:/var/lib/localStorage/files/original
    #  - ${PROCESSED_FILES_DIRECTORY}:/var/lib/localStorage/files/processed
    depends_on:
      amqp:
        condition: service_healthy
      db:
        condition: service_healthy
        
  ai:
    build:
      context: .
      dockerfile: Dockerfile.aiservice
      args:
        - DATABASE_CONNECTION_STRING=Host=db;Username=${DATABASE_USER};Password=${DATABASE_PASSWORD};Database=${DATABASE_NAME}
#        - RABBIT_CONNECTION_STRING=Host=amqp;Port=${AMQP_PORT};Username=${AMQP_USERNAME};Password=${AMQP_PASSWORD};ProvidedName=AiService
        - RABBIT_CONNECTION_STRING=Host=amqp;Port=5672;Username=${AMQP_USERNAME};Password=${AMQP_PASSWORD};ProvidedName=AiService
        #- ORIGINAL_FILES_DIRECTORY=/var/lib/localStorage/files/original
        #- PROCESSED_FILES_DIRECTORY=/var/lib/localStorage/files/processed
        #- =${API_URL}
    container_name: wti_ai
    restart: unless-stopped
    #volumes:
    #  - ${ORIGINAL_FILES_DIRECTORY}:/var/lib/localStorage/files/original
    #  - ${PROCESSED_FILES_DIRECTORY}:/var/lib/localStorage/files/processed
    depends_on:
      amqp:
        condition: service_healthy
      db:
        condition: service_healthy